import java.sql.*;

/**
 * Database access point for the program
 *
 * @author Zack Yourkavitch
 */
public class DBUpdater
{

  /**
   * Instance variables to help set up connection.
   * Information hidden
   */
  Hidden info = new Hidden();
  private String user = info.getUser();
  private String pass = info.getPass();
  private String url = info.getUrl();
  protected Connection dbConnection;

  /**
   * registers the JDBC driver to activate JDBC
   * @return true when successful
   */
  public boolean activateJDBC()
  {
    try
    {
      DriverManager.registerDriver(new com.mysql.jdbc.Driver());
    }
    catch(SQLException e)
    {
      e.printStackTrace();
    }
    return true;
  }

  /**
   * Connects to the DB server using the instance
   * variables mentioned previously
   */
  public void connect()
  {
    try
    {
      dbConnection = DriverManager.getConnection(url, user, pass);
    }
    catch (SQLException e)
    {
      e.printStackTrace();
    }
  }

  /**
   * closes connection to the database
   */
  public void close()
  {
    try
    {
      dbConnection.close();
    }
    catch (SQLException e)
    {
      e.printStackTrace();
    }
  }

  /**
   * Adds user to the database
   * @param userID userID generated by UUID
   * @param username username input by user
   * @param email email input by user
   * @param password password input by user
   * @return true if successful
   * @throws SQLIntegrityConstraintViolationException when repeat email
   */
  public boolean addUserToDB(String userID, String username, String email, String password)
          throws SQLIntegrityConstraintViolationException
  {
    String addUser = "insert into user (userid, username, email, password) values (?, ?, ?, ?);";
    try
    {
      PreparedStatement preparedAddUser = dbConnection.prepareStatement(addUser);
      preparedAddUser.setString(1, userID);
      preparedAddUser.setString(2, username);
      preparedAddUser.setString(3, email);
      preparedAddUser.setString(4, password);
      int rowsAdded = preparedAddUser.executeUpdate();
      if (rowsAdded == 1)
      {
        System.out.println("Added");
        return true;
      }
      return false;
    }
    catch(SQLIntegrityConstraintViolationException s)
    {
      throw new SQLIntegrityConstraintViolationException();
    }
    catch (SQLException e)
    {
      e.printStackTrace();
      return false;
    }
  }

  /**
   * removes a user from the database
   * NOTE: When GUI implemented, this will not be callable unless
   * user is logged in to an existing userid
   * @param userid UUID generated user id
   * @return true if successfully removed
   */
  public boolean removeUserFromDB(String userid)
  {
    String removeUser = "delete from user where (userid = ?);";
    try
    {
      PreparedStatement preparedRemoveUser = dbConnection.prepareStatement(removeUser);
      preparedRemoveUser.setString(1, userid);
      int rowsRemoved = preparedRemoveUser.executeUpdate();
      if (rowsRemoved == 1)
      {
        System.out.println("Removed");
        return true;
      }
      return false;
    }
    catch (SQLException e)
    {
      throw new RuntimeException(e);
    }
  }

  /**
   * used to ensure login credentials, fetches a password given an email
   * @param email user inputted email
   * @return password for user
   * @throws DoesNotExistException if account does not exist for email
   * @throws SQLException to make prepareStatement happy
   */
  public String findPasswordFromEmail(String email) throws DoesNotExistException, SQLException {
    String foundPass;
    String selectUser = "select * from user where (email = ?);";
    PreparedStatement preparedSelectUser = dbConnection.prepareStatement(selectUser);
    preparedSelectUser.setString(1, email);
    ResultSet rs = preparedSelectUser.executeQuery();
    if(rs.next())
    {
      foundPass = rs.getString("password");
      return foundPass;
    }
    else
    {
      throw new DoesNotExistException("Email does not exist");
    }
  }

  /**
   * used when user deleting account to ensure it is
   * them deleting the account
   * @param userID currently logged in userID
   * @return user's password
   */
  public String findPasswordFromID(String userID)
  {
    String foundPass;
    String selectUser = "select * from user where (userid = ?);";
    try
    {
      PreparedStatement preparedSelectUser = dbConnection.prepareStatement(selectUser);
      preparedSelectUser.setString(1, userID);
      ResultSet rs = preparedSelectUser.executeQuery();
      rs.next();
      foundPass = rs.getString("password");
    }
    catch (SQLException e)
    {
      throw new RuntimeException(e);
    }
    return foundPass;
  }

  /**
   * Used to assign currentUserID a value in Application level
   * @param email user's email
   * @return user's ID
   */
  public String findUserID(String email)
  {
    String foundID;
    String selectUser = "select * from user where (email = ?);";
    try
    {
      PreparedStatement preparedSelectUser = dbConnection.prepareStatement(selectUser);
      preparedSelectUser.setString(1, email);
      ResultSet rs = preparedSelectUser.executeQuery();
      rs.next();
      foundID = rs.getString("userid");
    }
    catch (SQLException e)
    {
      throw new RuntimeException(e);
    }
    return foundID;
  }

  /**
   * Used to add a task to the database
   * @param taskID UUID generated ID
   * @param taskTitle title of the task
   * @param taskDesc brief description of task
   * @param deadline deadline for task, formatted (xx/xx)
   * @param priority priority, 1 for low 2 for high
   * @param status status of task (completed, in progress)
   * @param taskUserID ID of user who made task
   * @return true if successfully added
   */
  public boolean addTaskToDB(String taskID, String taskTitle, String taskDesc, String deadline,
                             int priority, String status, String taskUserID)
  {
    String addTask = "insert into task (taskid, tasktitle, taskdesc, deadline, priority, status, " +
            "taskuserid) values (?, ?, ?, ?, ?, ?, ?)";
    try
    {
      PreparedStatement preparedAddTask = dbConnection.prepareStatement(addTask);
      preparedAddTask.setString(1, taskID);
      preparedAddTask.setString(2, taskTitle);
      preparedAddTask.setString(3, taskDesc);
      preparedAddTask.setString(4, deadline);
      preparedAddTask.setInt(5, priority);
      preparedAddTask.setString(6, status);
      preparedAddTask.setString(7, taskUserID);
      int rowsAdded = preparedAddTask.executeUpdate();
      if (rowsAdded == 1) {
        System.out.println("Added");
        return true;
      }
      return false;
    }
    catch (SQLException e)
    {
      throw new RuntimeException(e);
    }
  }

  /**
   * Used to add a category to the DB
   * @param categoryID UUID generated ID
   * @param madeByUserID ID of user who made the category
   * @param categoryTitle tilte of category
   * @return true if successfully added
   */
  public boolean addCategoryToDB(String categoryID, String madeByUserID, String categoryTitle)
  {
    String addCategory = "insert into category (categoryid, madebyuserid, categorytitle) values (?, ?, ?);";
    try {

      PreparedStatement preparedAddCategory = dbConnection.prepareStatement(addCategory);
      preparedAddCategory.setString(1, categoryID);
      preparedAddCategory.setString(2, madeByUserID);
      preparedAddCategory.setString(3, categoryTitle);
      int rowsAdded = preparedAddCategory.executeUpdate();
      if (rowsAdded == 1) {
        System.out.println("Added");
        return true;
      }
      return false;
    }
    catch (SQLException e)
    {
      throw new RuntimeException(e);
    }
  }

}

/**
 * Exception used within DB when a row does not exist
 *
 * @author Zack Yourkavitch
 */
class DoesNotExistException extends Exception
{
  String message;
  DoesNotExistException(String message)
  {
    this.message = message;
  }

  public String getMessage()
  {
    return message;
  }
}
